generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String
  fullName             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  department           String?
  phone                String?
  role_title           String?
  isActive             Boolean               @default(true)
  lastLoginAt          DateTime?
  lastLoginIp          String?
  companyId            String
  customRoleId         String?
  auditLogs            AuditLog[]
  conversations        Conversation[]
  ownedBudgets         CostCenter[]          @relation("BudgetOwner")
  managedDepartments   Department[]          @relation("DepartmentManager")
  locationContacts     Location[]            @relation("LocationContact")
  loginAttempts        LoginAttempt[]
  passwordResets       PasswordReset[]
  purchaseOrders       PurchaseOrder[]
  refreshTokens        RefreshToken[]
  sessions             Session[]
  supplierDocuments    SupplierDocument[]
  supplierMeetingNotes SupplierMeetingNote[]
  company              Company               @relation("UserCompany", fields: [companyId], references: [id])
  customRole           CustomRole?           @relation(fields: [customRoleId], references: [id])

  @@index([email])
  @@index([companyId])
}

model Conversation {
  id            String             @id @default(cuid())
  userId        String
  status        ConversationStatus @default(ACTIVE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  collectedData Json?
  phase         ProcurementPhase   @default(IDENTIFICATION)
  user          User               @relation(fields: [userId], references: [id])
  messages      Message[]

  @@index([userId, status])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now())
  contentJson    Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  ipAddress  String?
  userAgent  String?
  deviceInfo Json?
  lastUsedAt DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model RefreshToken {
  id         String    @id @default(cuid())
  userId     String
  token      String    @unique
  family     String
  ipAddress  String?
  userAgent  String?
  deviceInfo Json?
  isRevoked  Boolean   @default(false)
  revokedAt  DateTime?
  revokedBy  String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([family])
  @@index([expiresAt])
}

model LoginAttempt {
  id         String   @id @default(cuid())
  email      String
  userId     String?
  ipAddress  String
  userAgent  String?
  success    Boolean
  failReason String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  ipAddress String?
  used      Boolean   @default(false)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String?
  resourceId String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([resource, resourceId])
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  sku         String        @unique
  barcode     String?
  unit        String
  price       Decimal       @db.Money
  currency    String        @default("TRY")
  imageUrl    String?
  status      ProductStatus @default(ACTIVE)
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CategoryID  String?
  category    Category?     @relation(fields: [CategoryID], references: [CategoryID])
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, status])
  @@index([CategoryID])
  @@index([sku])
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  code        String        @unique
  unit        String
  price       Decimal       @db.Money
  currency    String        @default("TRY")
  imageUrl    String?
  status      ServiceStatus @default(ACTIVE)
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CategoryID  String?
  category    Category?     @relation(fields: [CategoryID], references: [CategoryID])
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, status])
  @@index([CategoryID])
  @@index([code])
}

model Company {
  id           String        @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categories   Category[]
  costCenters  CostCenter[]
  customRoles  CustomRole[]
  departments  Department[]
  locations    Location[]
  products     Product[]
  rfxDocuments RFxDocument[]
  rfxTemplates RFxTemplate[]
  services     Service[]
  suppliers    Supplier[]
  users        User[]        @relation("UserCompany")
  workflows    Workflow[]

  @@index([name])
}

model Category {
  name                String
  description         String?
  color               CategoryColor        @default(BLUE)
  icon                String
  isActive            Boolean              @default(true)
  companyId           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  CategoryID          String               @id @default(cuid())
  ParentCategoryID    String?
  categoryCode        String
  level               Int                  @default(1)
  parent              Category?            @relation("CategoryHierarchy", fields: [ParentCategoryID], references: [CategoryID])
  children            Category[]           @relation("CategoryHierarchy")
  company             Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  procurementRequests ProcurementRequest[]
  products            Product[]
  rfxTemplates        RFxTemplate[]
  services            Service[]
  suppliers           SupplierCategory[]

  @@unique([companyId, name, ParentCategoryID])
  @@index([companyId, isActive])
  @@index([ParentCategoryID])
}

model Location {
  id          String       @id @default(cuid())
  name        String
  description String?
  address     String
  contactId   String
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contact     User         @relation("LocationContact", fields: [contactId], references: [id])

  @@index([companyId])
  @@index([contactId])
}

model Department {
  id          String       @id @default(cuid())
  name        String
  description String?
  parentId    String?
  managerId   String
  locationId  String
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  costCenters CostCenter[]
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location    Location     @relation(fields: [locationId], references: [id])
  manager     User         @relation("DepartmentManager", fields: [managerId], references: [id])
  parent      Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")

  @@index([companyId])
  @@index([parentId])
  @@index([managerId])
  @@index([locationId])
}

model CostCenter {
  id              String     @id @default(cuid())
  name            String
  description     String?
  budget          Decimal    @db.Money
  remainingBudget Decimal    @db.Money
  spentBudget     Decimal    @db.Money
  budgetOwnerId   String
  departmentId    String
  companyId       String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  budgetOwner     User       @relation("BudgetOwner", fields: [budgetOwnerId], references: [id])
  company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department      Department @relation(fields: [departmentId], references: [id])

  @@index([departmentId])
  @@index([budgetOwnerId])
  @@index([companyId])
}

model ProcurementRequest {
  id                      String                   @id @default(cuid())
  itemTitle               String
  quantity                Int
  uom                     String
  simpleDefinition        String
  procurementType         String
  justification           String
  status                  RequestStatus            @default(DRAFT)
  auditTrail              Json[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  categoryId              String?
  currency                String                   @default("TRY")
  totalPrice              Decimal                  @default(0) @db.Money
  unitPrice               Decimal                  @default(0) @db.Money
  purchaseFrequency       String?
  deliveryDetails         DeliveryDetail?
  category                Category?                @relation(fields: [categoryId], references: [CategoryID])
  rfxDocuments            RFxDocument[]
  technicalSpecifications TechnicalSpecification[]
  workflowInstance        WorkflowInstance?

  @@index([categoryId])
}

model TechnicalSpecification {
  id                   String             @id @default(cuid())
  specKey              String
  specValue            String
  requirementLevel     String
  notes                String?
  procurementRequestId String
  procurementRequest   ProcurementRequest @relation(fields: [procurementRequestId], references: [id])

  @@index([procurementRequestId])
}

model DeliveryDetail {
  id                   String             @id @default(cuid())
  deliveryLocation     String
  dueDate              DateTime
  urgency              Urgency
  additionalNotes      String?
  procurementRequestId String             @unique
  procurementRequest   ProcurementRequest @relation(fields: [procurementRequestId], references: [id])
}

model Workflow {
  id          String             @id @default(cuid())
  name        String
  description String?
  edges       Json
  companyId   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  nodes       Json
  company     Company            @relation(fields: [companyId], references: [id])
  instances   WorkflowInstance[]

  @@index([companyId])
}

model WorkflowInstance {
  id                   String             @id @default(cuid())
  procurementRequestId String             @unique
  workflowId           String
  status               WorkflowStatus     @default(IN_PROGRESS)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  currentState         Json?
  history              Json[]
  procurementRequest   ProcurementRequest @relation(fields: [procurementRequestId], references: [id])
  workflow             Workflow           @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
  @@index([procurementRequestId])
}

model Supplier {
  id                  String                @id @default(cuid())
  companyId           String
  logoUrl             String?
  companyName         String
  brandName           String?
  description         String?
  country             String
  city                String
  district            String
  postalCode          String?
  address             String
  website             String?
  taxOffice           String
  taxNumber           String                @unique
  supplierType        SupplierType
  status              SupplierStatus        @default(PENDING_APPROVAL)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  purchaseOrders      PurchaseOrder[]
  rfxInvitations      RFxInvitation[]
  company             Company               @relation(fields: [companyId], references: [id])
  supplierBids        SupplierBid[]
  categories          SupplierCategory[]
  contacts            SupplierContact[]
  customFields        SupplierCustomField[]
  documents           SupplierDocument[]
  notes               SupplierMeetingNote[]
  productsAndServices SupplierProduct[]

  @@index([companyId])
  @@index([companyId, status])
}

model SupplierContact {
  id         String      @id @default(cuid())
  supplierId String
  fullName   String
  email      String
  phone      String?
  title      String
  role       ContactRole
  supplier   Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model SupplierDocument {
  id           String       @id @default(cuid())
  supplierId   String
  title        String
  documentType DocumentType
  fileUrl      String
  uploadedAt   DateTime     @default(now())
  uploadedById String
  validUntil   DateTime?
  supplier     Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])

  @@index([supplierId])
  @@index([uploadedById])
}

model SupplierMeetingNote {
  id           String   @id @default(cuid())
  supplierId   String
  meetingDate  DateTime
  title        String
  participants String
  notes        String
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id])
  supplier     Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
  @@index([createdById])
}

model SupplierCustomField {
  id         String   @id @default(cuid())
  supplierId String
  fieldName  String
  fieldValue String
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model SupplierCategory {
  supplierId String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [CategoryID])
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  @@id([supplierId, categoryId])
}

model SupplierProduct {
  id                 String              @id @default(cuid())
  supplierId         String
  name               String
  sku                String?
  technicalSpecs     String?
  unit               String
  purchaseOrderItems PurchaseOrderItem[]
  supplier           Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model PurchaseOrder {
  id               String              @id @default(cuid())
  supplierId       String
  orderNumber      String              @unique
  orderDate        DateTime
  expectedDelivery DateTime
  actualDelivery   DateTime?
  status           PurchaseOrderStatus @default(CREATED)
  totalAmount      Decimal             @db.Money
  currency         String
  createdById      String
  notes            String?
  createdBy        User                @relation(fields: [createdById], references: [id])
  supplier         Supplier            @relation(fields: [supplierId], references: [id])
  items            PurchaseOrderItem[]

  @@index([supplierId])
  @@index([createdById])
}

model PurchaseOrderItem {
  id              String          @id @default(cuid())
  purchaseOrderId String
  productId       String
  productName     String
  quantity        Int
  unit            String
  unitPrice       Decimal         @db.Money
  vatRate         Float
  discountRate    Float           @default(0)
  totalPrice      Decimal         @db.Money
  status          OrderItemStatus @default(PENDING)
  product         SupplierProduct @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([purchaseOrderId])
  @@index([productId])
}

model CustomRole {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  permissions Json
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users       User[]

  @@unique([companyId, name])
  @@index([companyId])
}

model RFxTemplate {
  id                     String        @id @default(cuid())
  companyId              String
  name                   String
  description            String?
  type                   RFxType
  isDefault              Boolean       @default(false)
  isActive               Boolean       @default(true)
  version                Int           @default(1)
  evaluationCriteria     Json?
  tags                   String[]
  createdById            String?
  lastModifiedById       String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  basicInfo              Json?
  categoryId             String?
  commercialTerms        Json?
  customSections         Json[]
  introductionAndSummary Json?
  scheduleAndProcedures  Json?
  technicalRequirements  Json?
  rfxDocuments           RFxDocument[]
  category               Category?     @relation(fields: [categoryId], references: [CategoryID])
  company                Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name, version])
  @@index([companyId, isActive])
  @@index([type])
  @@index([categoryId])
}

model RFxDocument {
  id                   String              @id @default(cuid())
  companyId            String
  templateId           String?
  procurementRequestId String?
  documentNumber       String              @unique
  title                String
  type                 RFxType
  status               RFxStatus           @default(DRAFT)
  publishDate          DateTime?
  submissionDeadline   DateTime
  questionDeadline     DateTime?
  awardDate            DateTime?
  collectedData        Json?
  technicalSpecs       Json?
  quantity             Int?
  estimatedBudget      Decimal?            @db.Money
  currency             String              @default("TRY")
  awardedBidId         String?             @unique
  tags                 String[]
  auditLog             Json[]
  createdById          String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  basicInfoData        Json?
  commercialData       Json?
  customSectionsData   Json[]
  evaluationData       Json?
  introductionData     Json?
  scheduleData         Json?
  technicalData        Json?
  evaluations          BidEvaluation[]
  attachments          RFxAttachment[]
  awardedBid           SupplierBid?        @relation("AwardedBid", fields: [awardedBidId], references: [id])
  company              Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  procurementRequest   ProcurementRequest? @relation(fields: [procurementRequestId], references: [id])
  template             RFxTemplate?        @relation(fields: [templateId], references: [id])
  invitedSuppliers     RFxInvitation[]
  receivedBids         SupplierBid[]

  @@index([companyId, status])
  @@index([documentNumber])
  @@index([submissionDeadline])
}

model RFxInvitation {
  id            String      @id @default(cuid())
  rfxDocumentId String
  supplierId    String
  invitedAt     DateTime    @default(now())
  viewedAt      DateTime?
  respondedAt   DateTime?
  status        String      @default("PENDING")
  declineReason String?
  rfxDocument   RFxDocument @relation(fields: [rfxDocumentId], references: [id], onDelete: Cascade)
  supplier      Supplier    @relation(fields: [supplierId], references: [id])

  @@unique([rfxDocumentId, supplierId])
  @@index([supplierId])
}

model SupplierBid {
  id                 String          @id @default(cuid())
  rfxDocumentId      String
  supplierId         String
  bidNumber          String          @unique
  status             BidStatus       @default(DRAFT)
  coverLetter        String?
  technicalProposal  Json
  commercialProposal Json
  totalPrice         Decimal         @db.Money
  unitPrices         Json?
  currency           String
  validityPeriod     Int
  deliveryTerms      Json?
  paymentTerms       Json?
  warrantyTerms      Json?
  technicalScore     Float?
  commercialScore    Float?
  totalScore         Float?
  ranking            Int?
  submittedAt        DateTime?
  withdrawnAt        DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  attachments        BidAttachment[]
  evaluations        BidEvaluation[]
  awardedRFx         RFxDocument?    @relation("AwardedBid")
  rfxDocument        RFxDocument     @relation(fields: [rfxDocumentId], references: [id])
  supplier           Supplier        @relation(fields: [supplierId], references: [id])

  @@unique([rfxDocumentId, supplierId])
  @@index([rfxDocumentId, status])
  @@index([supplierId])
}

model BidEvaluation {
  id               String      @id @default(cuid())
  bidId            String
  rfxDocumentId    String
  evaluatorId      String
  technicalScore   Float
  commercialScore  Float
  qualityScore     Float?
  deliveryScore    Float?
  technicalWeight  Float       @default(40)
  commercialWeight Float       @default(30)
  qualityWeight    Float       @default(20)
  deliveryWeight   Float       @default(10)
  weightedScore    Float
  strengths        String[]
  weaknesses       String[]
  generalComments  String?
  recommendation   String?
  evaluatedAt      DateTime    @default(now())
  bid              SupplierBid @relation(fields: [bidId], references: [id], onDelete: Cascade)
  rfxDocument      RFxDocument @relation(fields: [rfxDocumentId], references: [id])

  @@unique([bidId, evaluatorId])
  @@index([rfxDocumentId])
}

model RFxAttachment {
  id            String      @id @default(cuid())
  rfxDocumentId String
  fileName      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime    @default(now())
  rfxDocument   RFxDocument @relation(fields: [rfxDocumentId], references: [id], onDelete: Cascade)

  @@index([rfxDocumentId])
}

model BidAttachment {
  id         String      @id @default(cuid())
  bidId      String
  fileName   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  category   String?
  uploadedAt DateTime    @default(now())
  bid        SupplierBid @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

enum ProcurementPhase {
  IDENTIFICATION
  SUGGESTIONS
  SPECS
  SUPPLIER_PRODUCT_SUGGESTIONS
  FINAL
  PHASE_ONE_DONE
  PHASE_TWO_DONE
  PHASE_THREE_DONE
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum CategoryColor {
  RED
  ORANGE
  AMBER
  YELLOW
  LIME
  GREEN
  EMERALD
  TEAL
  CYAN
  SKY
  BLUE
  INDIGO
  VIOLET
  PURPLE
  FUCHSIA
  PINK
  ROSE
  SLATE
  GRAY
  ZINC
  NEUTRAL
  STONE
}

enum RequestStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkflowStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}

enum RFxType {
  RFQ
  RFP
  RFI
}

enum RFxStatus {
  DRAFT
  ACTIVE
  CLOSED
  CANCELLED
  AWARDED
}

enum BidStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  SHORTLISTED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  SERVICE_PROVIDER
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
}

enum ContactRole {
  PRIMARY_CONTACT
  EXECUTIVE
  FINANCE
  TECHNICAL
}

enum DocumentType {
  CONTRACT
  CERTIFICATE
  EMAIL_ARCHIVE
  TAX_DOCUMENT
  OTHER
}

enum PurchaseOrderStatus {
  CREATED
  APPROVED
  IN_TRANSIT
  PARTIALLY_DELIVERED
  COMPLETED
  CANCELLED
}

enum OrderItemStatus {
  PENDING
  DELIVERED
  OUT_OF_STOCK
}
