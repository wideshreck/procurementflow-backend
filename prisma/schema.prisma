generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String
  fullName                String
  role                    Role                     @default(USER)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  department              String?
  phone                   String?
  role_title              String?
  emailVerified           Boolean                  @default(false)
  emailVerifiedAt         DateTime?
  isActive                Boolean                  @default(true)
  lastLoginAt             DateTime?
  lastLoginIp             String?
  companyId               String
  auditLogs               AuditLog[]
  conversations           Conversation[]
  ownedBudgets            CostCenter[]             @relation("BudgetOwner")
  managedDepartments      Department[]             @relation("DepartmentManager")
  emailVerificationTokens EmailVerificationToken[]
  locationContacts        Location[]               @relation("LocationContact")
  loginAttempts           LoginAttempt[]
  passwordResets          PasswordReset[]
  refreshTokens           RefreshToken[]
  sessions                Session[]
  twoFactorAuth           TwoFactorAuth?
  company                 Company                  @relation("UserCompany", fields: [companyId], references: [id])

  @@index([email])
  @@index([isActive, emailVerified])
  @@index([companyId])
}

model Conversation {
  id            String             @id @default(cuid())
  userId        String
  status        ConversationStatus @default(ACTIVE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  collectedData Json?
  phase         ProcurementPhase   @default(IDENTIFICATION)
  user          User               @relation(fields: [userId], references: [id])
  messages      Message[]

  @@index([userId, status])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now())
  contentJson    Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  ipAddress  String?
  userAgent  String?
  deviceInfo Json?
  lastUsedAt DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model RefreshToken {
  id         String    @id @default(cuid())
  userId     String
  token      String    @unique
  family     String
  ipAddress  String?
  userAgent  String?
  deviceInfo Json?
  isRevoked  Boolean   @default(false)
  revokedAt  DateTime?
  revokedBy  String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([family])
  @@index([expiresAt])
}

model LoginAttempt {
  id         String   @id @default(cuid())
  email      String
  userId     String?
  ipAddress  String
  userAgent  String?
  success    Boolean
  failReason String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  ipAddress String?
  used      Boolean   @default(false)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model EmailVerificationToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  email     String
  used      Boolean   @default(false)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String
  backupCodes String[]
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String?
  resourceId String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([resource, resourceId])
}

model Product {
  id               String            @id @default(cuid())
  name             String
  description      String?
  sku              String            @unique
  barcode          String?
  CategoryID       String?
  unit             String
  price            Decimal           @db.Money
  currency         String            @default("TRY")
  imageUrl         String?
  status           ProductStatus     @default(ACTIVE)
  companyId        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  category         Category?         @relation(fields: [CategoryID], references: [CategoryID])
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplierProducts SupplierProduct[]

  @@index([companyId, status])
  @@index([CategoryID])
  @@index([sku])
}

model Service {
  id               String            @id @default(cuid())
  name             String
  description      String?
  code             String            @unique
  CategoryID       String?
  unit             String
  price            Decimal           @db.Money
  currency         String            @default("TRY")
  imageUrl         String?
  status           ServiceStatus     @default(ACTIVE)
  companyId        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  category         Category?         @relation(fields: [CategoryID], references: [CategoryID])
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplierServices SupplierService[]

  @@index([companyId, status])
  @@index([CategoryID])
  @@index([code])
}

model Supplier {
  id                 String               @id @default(cuid())
  name               String
  imageUrl           String?
  description        String?
  taxInfo            Json? // { taxNumber: "...", taxOffice: "..." }
  address            String?
  phone              String?
  email              String?
  website            String?
  status             SupplierStatus       @default(PENDING)
  rating             Decimal?
  companyId          String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  company            Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  authorizedPersons  AuthorizedPerson[]
  documents          SupplierDocument[]
  supplierProducts   SupplierProduct[]
  supplierServices   SupplierService[]
  meetingNotes       MeetingNote[]
  contracts          Contract[]
  emails             Email[]

  @@index([companyId, status])
}

model AuthorizedPerson {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model SupplierDocument {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  fileType    String
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model SupplierProduct {
  id            String   @id @default(cuid())
  supplierId    String
  productId     String
  supplierPrice Decimal  @db.Money
  currency      String   @default("TRY")
  leadTime      Int
  minOrderQty   Int      @default(1)
  isPreferred   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, productId])
  @@index([productId])
  @@index([supplierId])
}

model SupplierService {
  id            String   @id @default(cuid())
  supplierId    String
  serviceId     String
  supplierPrice Decimal  @db.Money
  currency      String   @default("TRY")
  leadTime      Int
  isPreferred   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  service       Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, serviceId])
  @@index([serviceId])
  @@index([supplierId])
}

model Company {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Category[]
  costCenters CostCenter[]
  departments Department[]
  locations   Location[]
  products    Product[]
  services    Service[]
  suppliers   Supplier[]
  users       User[]       @relation("UserCompany")
  workflows   Workflow[]

  @@index([name])
}

model Category {
  CategoryID       String        @id @default(cuid())
  categoryCode     String        @unique
  name             String
  level            Int           @default(1) // 1: Ana, 2: Alt, 3: Detay
  description      String?
  color            CategoryColor @default(BLUE)
  icon             String
  isActive         Boolean       @default(true)
  ParentCategoryID String?
  companyId        String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent           Category?     @relation("CategoryHierarchy", fields: [ParentCategoryID], references: [CategoryID])
  children         Category[]    @relation("CategoryHierarchy")
  products         Product[]
  services         Service[]
  procurementRequests ProcurementRequest[]

  @@unique([companyId, name, ParentCategoryID])
  @@index([companyId, isActive])
  @@index([ParentCategoryID])
}

model Location {
  id          String       @id @default(cuid())
  name        String
  description String?
  address     String
  contactId   String
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contact     User         @relation("LocationContact", fields: [contactId], references: [id])

  @@index([companyId])
  @@index([contactId])
}

model Department {
  id          String       @id @default(cuid())
  name        String
  description String?
  parentId    String?
  managerId   String
  locationId  String
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  costCenters CostCenter[]
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location    Location     @relation(fields: [locationId], references: [id])
  manager     User         @relation("DepartmentManager", fields: [managerId], references: [id])
  parent      Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")

  @@index([companyId])
  @@index([parentId])
  @@index([managerId])
  @@index([locationId])
}

model CostCenter {
  id              String     @id @default(cuid())
  name            String
  description     String?
  budget          Decimal    @db.Money
  remainingBudget Decimal    @db.Money
  spentBudget     Decimal    @db.Money
  budgetOwnerId   String
  departmentId    String
  companyId       String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  budgetOwner     User       @relation("BudgetOwner", fields: [budgetOwnerId], references: [id])
  company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department      Department @relation(fields: [departmentId], references: [id])

  @@index([departmentId])
  @@index([budgetOwnerId])
  @@index([companyId])
}

enum Role {
  USER
  ADMIN
}

enum ProcurementPhase {
  IDENTIFICATION
  PHASE_ONE_DONE
  SUGGESTIONS
  PHASE_TWO_DONE
  SPECS
  PHASE_THREE_DONE
  SUPPLIER_PRODUCT_SUGGESTIONS
  FINAL
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum CategoryColor {
  RED
  ORANGE
  AMBER
  YELLOW
  LIME
  GREEN
  EMERALD
  TEAL
  CYAN
  SKY
  BLUE
  INDIGO
  VIOLET
  PURPLE
  FUCHSIA
  PINK
  ROSE
  SLATE
  GRAY
  ZINC
  NEUTRAL
  STONE
}

model ProcurementRequest {
  id                      String                   @id @default(cuid())
  itemTitle               String
  quantity                Int
  uom                     String
  simpleDefinition        String
  procurementType         String
  justification           String
  status                  RequestStatus            @default(DRAFT)
  currency                String                   @default("TRY")
  unitPrice               Decimal                  @default(0) @db.Money
  totalPrice              Decimal                  @default(0) @db.Money
  auditTrail              Json[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  categoryId              String?
  category                Category?                @relation(fields: [categoryId], references: [CategoryID])
  deliveryDetails         DeliveryDetail?
  technicalSpecifications TechnicalSpecification[]
  workflowInstance        WorkflowInstance?

  @@index([categoryId])
}

model TechnicalSpecification {
  id                   String             @id @default(cuid())
  specKey              String
  specValue            String
  requirementLevel     String
  notes                String?
  procurementRequestId String
  procurementRequest   ProcurementRequest @relation(fields: [procurementRequestId], references: [id])

  @@index([procurementRequestId])
}

model DeliveryDetail {
  id                   String   @id @default(cuid())
  deliveryLocation     String
  dueDate              DateTime
  urgency              Urgency
  additionalNotes      String?
  procurementRequestId String   @unique
  procurementRequest   ProcurementRequest @relation(fields: [procurementRequestId], references: [id])
}

enum RequestStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Workflow {
  id          String             @id @default(cuid())
  name        String
  description String?
  nodes       Json
  edges       Json
  companyId   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  company     Company            @relation(fields: [companyId], references: [id])
  instances   WorkflowInstance[]

  @@index([companyId])
}

model WorkflowInstance {
  id                   String           @id @default(cuid())
  workflowId           String
  procurementRequestId String           @unique
  status               WorkflowStatus   @default(IN_PROGRESS)
  currentState         Json?
  history              Json[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  workflow             Workflow         @relation(fields: [workflowId], references: [id])
  procurementRequest   ProcurementRequest @relation(fields: [procurementRequestId], references: [id])

  @@index([workflowId])
  @@index([procurementRequestId])
}

enum WorkflowStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}

model MeetingNote {
  id          String   @id @default(cuid())
  title       String
  content     String
  date        DateTime
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model Contract {
  id          String   @id @default(cuid())
  title       String
  filePath    String
  startDate   DateTime
  endDate     DateTime
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}

model Email {
  id          String   @id @default(cuid())
  subject     String
  body        String
  from        String
  to          String
  date        DateTime
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
}
